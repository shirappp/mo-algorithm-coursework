from mo_algorithm import mo_algorithm, Query
def run_test_case(arr, raw_queries, expected):
    queries = [Query(l, r, idx) for idx, (l, r) in enumerate(raw_queries)]
    result = mo_algorithm(arr, queries)
    assert result == expected, f"‚ùå –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected}, –ø–æ–ª—É—á–µ–Ω–æ {result}"
    print(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: {result}")

def main():
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ú–æ...\n")

    # –¢–µ—Å—Ç 1: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ª—É—á–∞–π
    run_test_case(
        arr=[1, 2, 1, 3, 4, 2, 1],
        raw_queries=[(0, 4), (1, 3), (2, 6)],
        expected=[4, 3, 4]
    )

    # –¢–µ—Å—Ç 2: —Ä–∞–∑–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    run_test_case(
        arr=[5, 1, 2, 1, 5, 3],
        raw_queries=[(0, 5), (1, 4)],
        expected=[4, 3]
    )

    # –¢–µ—Å—Ç 3: –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    run_test_case(
        arr=[7, 7, 7, 7, 7],
        raw_queries=[(0, 4), (1, 3)],
        expected=[1, 1]
    )

    # –¢–µ—Å—Ç 4: –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ
    run_test_case(
        arr=[42],
        raw_queries=[(0, 0)],
        expected=[1]
    )

    # –¢–µ—Å—Ç 5: –Ω–µ–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã
    run_test_case(
        arr=[1, 2, 3, 4, 5, 6],
        raw_queries=[(0, 2), (3, 5)],
        expected=[3, 3]
    )

    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()